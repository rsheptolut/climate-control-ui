{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/api/climatecontrol.api.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/device-control/device-control.component.html","webpack:///src/app/device-control/device-control.component.ts","webpack:///src/app/device-list/device-list.component.ts","webpack:///src/app/device-list/device-list.component.html","webpack:///src/app/device-settings/device-settings.component.ts","webpack:///src/app/device-settings/device-settings.component.html","webpack:///src/app/utils/api-client.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ClimateControlApi","apiClient","deviceId","get","settings","post","turnOn","command","routes","path","component","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","changeDetectorRef","media","mobileQuery","matchMedia","mobileQueryListener","detectChanges","addListener","portraitQuery","portraitQueryListener","document","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DeviceControlComponent","activatedRoute","climateControlApi","router","dontSaveSettings","paramMap","subscribe","p","getDevice","device","setTimeout","forms","changes","first","valueChanges","pipe","v","saveSettings","navigate","turnOnOff","DeviceListComponent","DeviceSettingsComponent","ApiClient","http","apiUrl","updateHeaders","apiRelativePath","query","sendRequest","getQueryStr","headers","body","put","str","Object","key","value","array","Array","isArray","item","encodeURIComponent","getQueryParamStringValue","Date","toISOString","toString","request","toPromise","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Settings } from '../data/settings';\nimport { ApiClient } from '../utils/api-client';\nimport { Injectable } from '@angular/core';\nimport { DeviceState } from '../data/device-state';\n\n@Injectable()\nexport class ClimateControlApi {\n    constructor(private apiClient: ApiClient) {\n    }\n\n    public async getDevice(deviceId: string): Promise<DeviceState> {\n        return await this.apiClient.get<DeviceState>(`device-state/${deviceId}`);\n    }\n\n    public async saveSettings(settings: Settings): Promise<void> {\n        await this.apiClient.post<void>(`settings`, settings);\n    }\n\n    public async turnOnOff(deviceId: string, turnOn: boolean): Promise<DeviceState> {\n        return await this.apiClient.get<DeviceState>(`turnOnOff/${deviceId}`, { command: turnOn ? 'TurnOn' : 'TurnOff' });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DeviceControlComponent } from './device-control/device-control.component';\nimport { DeviceListComponent } from './device-list/device-list.component';\nimport { DeviceSettingsComponent } from './device-settings/device-settings.component';\n\nconst routes: Routes = [\n  {\n    path: 'devices',\n    component: DeviceListComponent,\n  },\n  {\n    path: 'device/:id',\n    component: DeviceControlComponent,\n  },\n  // {\n  //   path: 'device/{:id}/settings',\n  //   component: DeviceSettingsComponent,\n  // },\n  {\n      path: '**',\n      redirectTo: '/devices',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, ChangeDetectorRef } from '@angular/core';\nimport { MediaMatcher } from '@angular/cdk/layout';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  public mobileQuery: MediaQueryList;\n  public portraitQuery: MediaQueryList;\n  private mobileQueryListener: () => void;\n  private portraitQueryListener: () => void;\n\n  constructor(\n    changeDetectorRef: ChangeDetectorRef,\n    media: MediaMatcher,\n  ) {\n    this.mobileQuery = media.matchMedia('(max-width: 600px)');\n    this.mobileQueryListener = () => changeDetectorRef.detectChanges();\n    this.mobileQuery.addListener(this.mobileQueryListener);\n    this.portraitQuery = media.matchMedia('(orientation: portrait)');\n    this.portraitQueryListener = () => changeDetectorRef.detectChanges();\n    this.portraitQuery.addListener(this.portraitQueryListener);\n  }\n\n  public get title(): string {\n    return document.title;\n  }\n}\n","<div class=\"container\" [class.is-mobile]=\"mobileQuery.matches\">\n  <mat-toolbar color=\"primary\" class=\"toolbar\">\n      <button mat-icon-button (click)=\"snav.toggle()\"><mat-icon>menu</mat-icon></button>\n      <h1 class=\"app-name\" (click)=\"snav.toggle()\">{{title}}</h1>\n      <div class=\"grower\"></div>\n  </mat-toolbar>\n\n  <mat-sidenav-container class=\"example-sidenav-container\"\n                         [style.marginTop.px]=\"mobileQuery.matches ? 56 : 0\">\n      <mat-sidenav #snav [mode]=\"'over'\"\n                  [fixedInViewport]=\"mobileQuery.matches\" fixedTopGap=\"56\">\n          <mat-nav-list>\n            <a mat-list-item routerLink=\"devices\">Devices</a>\n          </mat-nav-list>\n      </mat-sidenav>\n  \n      <mat-sidenav-content>\n        <router-outlet></router-outlet>\n      </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { FormsModule } from '@angular/forms';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { DeviceListComponent } from './device-list/device-list.component';\nimport { DeviceControlComponent } from './device-control/device-control.component';\nimport { DeviceSettingsComponent } from './device-settings/device-settings.component';\nimport { ApiClient } from './utils/api-client';\nimport { ClimateControlApi } from './api/climatecontrol.api';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DeviceListComponent,\n    DeviceControlComponent,\n    DeviceSettingsComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n    MatProgressSpinnerModule,\n    MatInputModule,\n    MatCardModule,\n    MatChipsModule,\n    MatListModule,\n    MatCheckboxModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatNativeDateModule,\n    MatDatepickerModule,\n    MatRadioModule,\n  ],\n  providers: [\n    ApiClient,\n    ClimateControlApi,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<mat-spinner *ngIf=\"!device\"></mat-spinner>\n\n<mat-card *ngIf=\"device\" class=\"card\">\n    <div class=\"page-header\">\n        <h1>{{device.settings.name}}</h1>\n        \n        <button mat-icon-button (click)=\"goToSettings()\"><mat-icon>settings</mat-icon></button>\n    </div>\n\n    <br/>\n    <div class=\"temperature\">\n        <div class=\"temperature__value\">\n            {{device.state.lastAverageTemperature}}\n        </div>\n    </div>\n\n    <br/>\n    <div class=\"aircon\">\n        <div class=\"aircon__heading\">A/C</div>\n        <div class=\"aircon__state\"></div>\n        <button mat-raised-button color=\"primary\" (click)=\"turnOnOff(true)\">Turn on now</button>\n        &nbsp;&nbsp;\n        <button mat-raised-button color=\"accent\" (click)=\"turnOnOff(false)\">Turn off now</button>\n    </div>\n\n    <form #form=\"ngForm\">\n        <br/>\n        <div class=\"row\">\n            <mat-slide-toggle name=\"automationOn\" [(ngModel)]=\"device.settings.automationOn\">Automation (now {{device.settings.automationOn ? 'ON' : 'OFF'}})</mat-slide-toggle>\n        </div>\n        \n        <br/>\n        <br/>\n        <div class=\"row\">\n            <mat-slide-toggle name=\"onDuringDay\" [(ngModel)]=\"device.settings.onDuringDay\">Turn on during day ({{device.settings.onDuringDay ? 'YES' : 'NO'}})</mat-slide-toggle>\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n            <mat-form-field class=\"inline\">\n                <mat-label>Day start time:</mat-label>\n                <input matInput type=\"time\" id=\"dayTimeStart\" name=\"dayTimeStart\" min=\"00:00\" max=\"24:00\" [(ngModel)]=\"device.settings.dayTimeStart\">\n            </mat-form-field>\n        </div>\n        <div class=\"row\">\n            <p>Keep day temperature from:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n            <mat-form-field class=\"inline\">\n                <mat-label>Turn on if below</mat-label>\n                <input name=\"dayTempOn\" matInput [(ngModel)]=\"device.settings.dayTempOn\" type=\"number\" min=\"1\" max=\"50\">\n            </mat-form-field>\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n            <mat-form-field class=\"inline\">\n                <mat-label>Turn off if above</mat-label>\n                <input name=\"dayTempOff\" matInput [(ngModel)]=\"device.settings.dayTempOff\" type=\"number\" min=\"1\" max=\"50\">\n            </mat-form-field>\n        </div>\n        \n        <br/>\n        <br/>\n        <div class=\"row\">\n            <mat-slide-toggle name=\"onDuringNight\" [(ngModel)]=\"device.settings.onDuringNight\">Turn on during night ({{device.settings.onDuringNight ? 'YES' : 'NO'}})</mat-slide-toggle>     <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n            <mat-form-field class=\"inline\">\n                <mat-label>Night start time:</mat-label>\n                <input matInput type=\"time\" id=\"nightTimeStart\" name=\"nightTimeStart\" min=\"00:00\" max=\"24:00\" [(ngModel)]=\"device.settings.nightTimeStart\">\n            </mat-form-field>\n        </div>\n        <div class=\"row\">\n            <p>Keep night temperature from:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n            <mat-form-field class=\"inline\">\n                <mat-label>Turn on if below</mat-label>\n                <input name=\"nightTempOn\" matInput [(ngModel)]=\"device.settings.nightTempOn\" type=\"number\" min=\"1\" max=\"50\">\n            </mat-form-field>\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n            <mat-form-field class=\"inline\">\n                <mat-label>Turn off if above</mat-label>\n                <input name=\"nightTempOff\" matInput [(ngModel)]=\"device.settings.nightTempOff\" type=\"number\" min=\"1\" max=\"50\">\n            </mat-form-field>\n        </div>\n        \n        <mat-form-field floatLabel=\"always\">\n            <mat-label>Reading override (dbg)</mat-label>\n            <input name=\"fakeAverageTemperature\" matInput [(ngModel)]=\"device.settings.fakeAverageTemperature\" type=\"number\" max=\"50\">\n        </mat-form-field>\n    </form>\n</mat-card>\n\n","import { Component, OnInit, ChangeDetectorRef, ViewChild, AfterViewInit, QueryList, ViewChildren } from '@angular/core';\nimport { Settings } from '../data/settings';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ClimateControlApi } from '../api/climatecontrol.api';\nimport { DeviceState } from '../data/device-state';\nimport { AppComponent } from '../app.component';\nimport { MediaMatcher } from '@angular/cdk/layout';\nimport { NgForm } from '@angular/forms';\nimport { pipe } from 'rxjs';\nimport { debounceTime, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-device-control',\n  templateUrl: './device-control.component.html',\n  styleUrls: ['./device-control.component.scss']\n})\nexport class DeviceControlComponent implements AfterViewInit {\n  @ViewChildren('form')\n  public forms: QueryList<NgForm>;\n  public device: DeviceState;\n  public deviceId: string;\n  public mobileQuery: MediaQueryList;\n  public portraitQuery: MediaQueryList;\n  private mobileQueryListener: () => void;\n  private portraitQueryListener: () => void;\n  public dontSaveSettings = true;\n\n  constructor(\n    activatedRoute: ActivatedRoute,\n    private climateControlApi: ClimateControlApi,\n    private router: Router,\n    media: MediaMatcher,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    activatedRoute.paramMap.subscribe(async p => {\n      this.deviceId = p.get('id');\n      this.device = await climateControlApi.getDevice(this.deviceId);\n      setTimeout(() => this.dontSaveSettings = false, 1000);\n    });\n    this.mobileQuery = media.matchMedia('(max-width: 600px)');\n    this.mobileQueryListener = () => changeDetectorRef.detectChanges();\n    this.mobileQuery.addListener(this.mobileQueryListener);\n    this.portraitQuery = media.matchMedia('(orientation: portrait)');\n    this.portraitQueryListener = () => changeDetectorRef.detectChanges();\n    this.portraitQuery.addListener(this.portraitQueryListener);\n  }\n\n  ngAfterViewInit(): void {\n    this.forms.changes.subscribe((forms) => {\n      this.forms.first.valueChanges.pipe(\n        debounceTime(500),\n        switchMap(v => this.saveSettings()),\n      ).subscribe(() => {});\n    });\n  }\n\n  public goToSettings(): void {\n    this.router.navigate([`device/${this.deviceId}/settings`]);\n  }\n\n  public async turnOnOff(turnOn: boolean): Promise<void> {\n    await this.climateControlApi.turnOnOff(this.deviceId, turnOn);\n  }\n\n  public async saveSettings(): Promise<void> {\n    if (!this.dontSaveSettings) {\n      this.climateControlApi.saveSettings(this.device.settings);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-device-list',\n  templateUrl: './device-list.component.html',\n  styleUrls: ['./device-list.component.scss']\n})\nexport class DeviceListComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n    this.router.navigate(['device', 'my-only-device']);\n  }\n}\n","<p>device-list works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-device-settings',\n  templateUrl: './device-settings.component.html',\n  styleUrls: ['./device-settings.component.scss']\n})\nexport class DeviceSettingsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>device-settings works!</p>\n","import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ApiClient {\n    private readonly apiUrl = environment.apiUrl;\n    private headers: HttpHeaders;\n\n    constructor(\n        private readonly http: HttpClient,\n    ) {\n        this.updateHeaders();\n    }\n\n    public async get<T>(apiRelativePath: string, query?: object): Promise<T> {\n        return await this.sendRequest(this.http.get<T>(this.apiUrl + apiRelativePath + this.getQueryStr(query), { headers: this.headers }));\n    }\n\n    public async post<T>(apiRelativePath: string, body: any = null): Promise<T> {\n        return await this.sendRequest(this.http.post<T>(this.apiUrl + apiRelativePath, body, { headers: this.headers }));\n    }\n\n    public async put<T>(apiRelativePath: string, body: any = null): Promise<T> {\n        return await this.sendRequest(this.http.put<T>(this.apiUrl + apiRelativePath, body, { headers: this.headers }));\n    }\n\n    public async delete(apiRelativePath: string): Promise<void> {\n        await this.sendRequest(this.http.delete(this.apiUrl + apiRelativePath, { headers: this.headers }));\n    }\n\n    private updateHeaders(): void {\n        this.headers = new HttpHeaders({\n            'Content-Type': 'application/json'\n        });\n    }\n\n    private getQueryStr(query: object): string {\n        let str = '';\n        if (!query) {\n            return str;\n        }\n        for (const key of Object.keys(query)) {\n            const value = query[key];\n            if (value || value === 0 || value === false) {\n                const array = Array.isArray(value) ? value : [ value ];\n                for (const item of array) {\n                    str += (str ? '&' : '?') + key + '=' + encodeURIComponent(this.getQueryParamStringValue(item));\n                }\n            }\n        }\n        return str;\n    }\n\n    private getQueryParamStringValue(item: any): string {\n        if (item == null) {\n            return '';\n        } else if (item instanceof Date) {\n            return item.toISOString();\n        } else {\n            return item.toString();\n        }\n    }\n\n    private async sendRequest<T>(request: Observable<T>): Promise<T> {\n        return await request.toPromise();\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:7071/api/v1/climatecontrol/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}